var commandObj = null;function passCommand(command){	if ((commandObj == null) || (commandObj.isFinished()))	{		commandObj = new Command();		commandObj.send(command);	}	return false;}function passfCommand(fcommand){	if ((commandObj == null) || (commandObj.isFinished()))	{		commandObj = new Command();		commandObj.sendAlias(fcommand);	}	return false;}var keyMap = {	38: 'up',	40: 'down',	37: 'left',	39: 'right',	13: 'enter',	8: 'return',	46: 'delete',	36: 'source',	33: 'pgup',	34: 'pgdown',	35: 'mute',	0: ''};var charMap = {	48: '0',	49: '1',	50: '2',	51: '3',	52: '4',	53: '5',	54: '6',	55: '7',	56: '8',	57: '9',	32: 'pause',		// espace	112: 'play',		// p	115: 'stop',		// s	105: 'info',		// info	44: 'previous',		// ,	59: 'reverse',		// ;	58: 'forward',		// :	33: 'next',			// !	194: 'subtitle',	// §	0: ''};function passKeyCmd(){	if (window.event)	{		var charCode = window.event.keyCode;		var keyCode = '';	}	else	{		var charCode = arguments[0].charCode;		var keyCode = arguments[0].keyCode;	}	var container = document.getElementById('lastkey');	if (container == null)		return true;	while (container.firstChild != null)		container.removeChild(container.firstChild);	container.appendChild(document.createTextNode('char ' + charCode + '; key ' + keyCode));	if (charCode && charMap[charCode])		passfCommand(charMap[charCode]);	else if (keyCode && keyMap[keyCode])		passfCommand(keyMap[keyCode]);	else		return true;	return false;}document.onkeypress = passKeyCmd;function Command(){}Command.prototype.finished = false;Command.prototype.base = { 'url': null };Command.prototype.createXmlHttp = function(){	var A = null;	if (typeof ActiveXObject != 'undefined')	{		try		{			A = new ActiveXObject("Msxml2.XMLHTTP");		}		catch (e)		{			try			{				A = new ActiveXObject("Microsoft.XMLHTTP");			}			catch (oc)			{				A = null;			}		}	}	if (!A && typeof XMLHttpRequest != 'undefined')	{		A = new XMLHttpRequest();	}	return A;};Command.prototype.send = function(command){	this._send('?cmd=' + encodeURIComponent(command));};Command.prototype.sendAlias = function(command){	this._send('?fcmd=' + encodeURIComponent(command));};Command.prototype._send = function(queryString){	var url = this.getUrl();	url += queryString;	var x = this.createXmlHttp();	x.open('POST', url, false);	// TODO: Asynchronous features and error messages.	x.send(null);	this.finished = true;};Command.prototype.getUrl = function(){	if (this.base.url == null)	{		this.base.url = window.location.protocol + '//' + window.location.host + window.location.pathname;	}	return this.base.url;};Command.prototype.isFinished = function(){	return this.finished;};